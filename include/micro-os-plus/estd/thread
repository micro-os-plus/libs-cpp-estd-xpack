/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission to use, copy, modify, and/or distribute this software
 * for any purpose is hereby granted, under the terms of the MIT license.
 *
 * If a copy of the license was not distributed with this file, it can
 * be obtained from https://opensource.org/licenses/MIT/.
 */

#ifndef MICRO_OS_PLUS_ESTD_THREAD_
#define MICRO_OS_PLUS_ESTD_THREAD_

// ----------------------------------------------------------------------------

/*
 * The code is inspired by LLVM libcxx and GNU libstdc++-v3.
 */

#pragma GCC diagnostic push

#pragma GCC diagnostic ignored "-Wpedantic"
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wgnu-include-next"
#endif

// Include the next <thread> file found in the search path.
// #include_next is a GCC extension
#include_next <thread>

#pragma GCC diagnostic pop

#include <type_traits>
#include <functional>

#include <micro-os-plus/rtos.h>

#include <micro-os-plus/estd/chrono>

// ----------------------------------------------------------------------------

namespace micro_os_plus
{
  namespace estd
  {
    // ------------------------------------------------------------------------

    /**
     * @ingroup micro-os-plus-iso
     * @{
     */

#include "thread_internal.h"

    /**
     * @}
     */

    // ==========================================================================
  } // namespace estd
} // namespace micro_os_plus

namespace std
{
  // Define a std::hash specialisation.
  template <>
  struct hash<micro_os_plus::estd::thread::id>
      : public std::unary_function<micro_os_plus::estd::thread::id, size_t>
  {
    inline size_t
    operator() (micro_os_plus::estd::thread::id v) const
    {
      return std::hash<micro_os_plus::estd::thread::native_handle_type> () (
          v.native_thread_);
    }
  };
} // namespace std

#if defined(MICRO_OS_PLUS_HAS_STD_THREADS)

namespace std
{
  /**
   * @ingroup micro-os-plus-iso
   * @{
   */

#include "thread_internal.h"

  // Define a std::hash specialisation.
  template <>
  struct hash<std::thread::id>
      : public std::unary_function<std::thread::id, size_t>
  {
    inline size_t
    operator() (std::thread::id v) const
    {
      return std::hash<std::thread::native_handle_type> () (v.native_thread_);
    }
  };

  /**
   * @}
   */
} // namespace std

#endif

// ----------------------------------------------------------------------------

#endif // MICRO_OS_PLUS_ESTD_THREAD_

// ----------------------------------------------------------------------------
