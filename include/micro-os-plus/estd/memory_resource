/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus/)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission to use, copy, modify, and/or distribute this software
 * for any purpose is hereby granted, under the terms of the MIT license.
 *
 * If a copy of the license was not distributed with this file, it can
 * be obtained from https://opensource.org/licenses/MIT/.
 */

#ifndef MICRO_OS_PLUS_ESTD_ISO_MEMORY_
#define MICRO_OS_PLUS_ESTD_ISO_MEMORY_

// ----------------------------------------------------------------------------

#include <micro-os-plus/rtos/memory.h>

#include <cstddef>
#include <cerrno>
#include <cassert>
#include <limits>
#include <memory>

// ----------------------------------------------------------------------------

#pragma GCC diagnostic push

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wc++98-compat"
#endif

namespace micro_os_plus
{
  namespace estd
  {
    // ------------------------------------------------------------------------

    namespace pmr
    {
      // ------------------------------------------------------------------------

      using memory_resource = rtos::memory::memory_resource;

      template <typename T>
      class polymorphic_allocator;

      template <typename T1, typename T2>
      bool
      operator== (const polymorphic_allocator<T1>& a,
                  const polymorphic_allocator<T2>& b) noexcept;

      template <typename T1, typename T2>
      bool
      operator!= (const polymorphic_allocator<T1>& a,
                  const polymorphic_allocator<T2>& b) noexcept;

      /**
       * @addtogroup micro-os-plus-rtos-memres
       * @{
       */

      /**
       * @name Standard Memory Functions
       * @{
       */

      /**
       * @brief Get the address of a memory manager based on `new/delete`.
       * @par Parameters
       *  None.
       * @return Pointer to a memory manager object instance.
       */
      memory_resource*
      new_delete_resource (void) noexcept;

      /**
       * @brief Get the address of an ineffective memory manager.
       * @par Parameters
       *  None.
       * @return Pointer to a memory manager object instance.
       */
      memory_resource*
      null_memory_resource (void) noexcept;

      /**
       * @brief Set the default application memory manager.
       * @param res Pointer to new memory manager object instance.
       * @return Pointer to previous memory manager object instance.
       */
      memory_resource*
      set_default_resource (memory_resource* res) noexcept;

      /**
       * @brief Get the default application memory manager.
       * @par Parameters
       *  None.
       * @return Pointer to a memory manager object instance.
       */
      memory_resource*
      get_default_resource (void) noexcept;

      /**
       * @}
       */

      /**
       * @}
       */

      extern memory_resource* default_resource;

      // ======================================================================

      template <typename T>
      class polymorphic_allocator
      {
      public:
        typedef T value_type;

        polymorphic_allocator () noexcept;

        polymorphic_allocator (memory_resource* r) noexcept;

        polymorphic_allocator (polymorphic_allocator const& a) = default;

        template <typename U>
        polymorphic_allocator (polymorphic_allocator<U> const& other) noexcept;

        polymorphic_allocator&
        operator= (polymorphic_allocator const& a)
            = default;

        value_type*
        allocate (std::size_t n);

        void
        deallocate (value_type* p, std::size_t n) noexcept;

        std::size_t
        max_size (void) const noexcept;

        polymorphic_allocator
        select_on_container_copy_construction (void) const noexcept;

        memory_resource*
        resource (void) const noexcept;

      private:
        memory_resource* res_;
      };

      // ----------------------------------------------------------------------
    } // namespace pmr
  } // namespace estd
} // namespace micro_os_plus

// ===== Inline & template implementations ====================================

namespace micro_os_plus
{
  namespace estd
  {
    namespace pmr
    {
      // ----------------------------------------------------------------------

      /**
       * @details
       * If not set explicitly by the user, this function
       * will return an instance of `malloc_memory_resource`
       * on bare metal platforms and of
       * `malloc_memory_resource` on POSIX platforms.
       */
      inline memory_resource*
      get_default_resource (void) noexcept
      {
        rtos::memory::init_once_default_resource ();
        return default_resource;
      }

      // ======================================================================

      template <typename T>
      polymorphic_allocator<T>::polymorphic_allocator () noexcept
          : res_ (get_default_resource ())
      {
      }

      template <typename T>
      inline polymorphic_allocator<T>::polymorphic_allocator (
          memory_resource* r) noexcept
          : res_ (r)
      {
      }

      template <typename T>
      template <typename U>
      inline polymorphic_allocator<T>::polymorphic_allocator (
          polymorphic_allocator<U> const& other) noexcept
          : res_ (other.resource ())
      {
      }

      template <typename T>
      inline typename polymorphic_allocator<T>::value_type*
      polymorphic_allocator<T>::allocate (std::size_t n)
      {
        if (n > max_size ())
          {
            estd::__throw_system_error (
                EINVAL, "polymorphic_allocator<T>::allocate(std::size_t n)"
                        " 'n' exceeds maximum supported size");
          }

        return static_cast<value_type*> (
            res_->allocate (n * sizeof (value_type), alignof (value_type)));
      }

      template <typename T>
      inline void
      polymorphic_allocator<T>::deallocate (value_type* p,
                                            std::size_t n) noexcept
      {
        assert (n <= max_size ());
        res_->deallocate (p, n * sizeof (value_type), alignof (value_type));
      }

      template <typename T>
      inline std::size_t
      polymorphic_allocator<T>::max_size (void) const noexcept
      {
        return std::numeric_limits<std::size_t>::max () / sizeof (value_type);
      }

      template <typename T>
      inline polymorphic_allocator<T>
      polymorphic_allocator<T>::select_on_container_copy_construction (
          void) const noexcept
      {
        return polymorphic_allocator ();
      }

      template <typename T>
      inline memory_resource*
      polymorphic_allocator<T>::resource (void) const noexcept
      {
        return res_;
      }

      // ======================================================================

      template <typename T, typename U>
      inline bool
      operator== (polymorphic_allocator<T> const& lhs,
                  polymorphic_allocator<U> const& rhs) noexcept
      {
        return *lhs.resource () == *rhs.resource ();
      }

      template <typename T, typename U>
      inline bool
      operator!= (polymorphic_allocator<T> const& lhs,
                  polymorphic_allocator<U> const& rhs) noexcept
      {
        return !(lhs == rhs);
      }

      // ----------------------------------------------------------------------
    } // namespace pmr
  } // namespace estd
} // namespace micro_os_plus

// ----------------------------------------------------------------------------

#endif // MICRO_OS_PLUS_ESTD_ISO_MEMORY_

#pragma GCC diagnostic pop

// ----------------------------------------------------------------------------
