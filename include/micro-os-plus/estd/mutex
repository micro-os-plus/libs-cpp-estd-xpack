/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus/)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission to use, copy, modify, and/or distribute this software
 * for any purpose is hereby granted, under the terms of the MIT license.
 *
 * If a copy of the license was not distributed with this file, it can
 * be obtained from https://opensource.org/licenses/MIT/.
 */

#ifndef MICRO_OS_PLUS_ESTD_MUTEX_
#define MICRO_OS_PLUS_ESTD_MUTEX_

// ----------------------------------------------------------------------------

/*
 * The code is inspired by LLVM libcxx and GNU libstdc++-v3.
 */

#pragma GCC diagnostic push

#pragma GCC diagnostic ignored "-Wpedantic"
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wgnu-include-next"
#endif

// Include the next <mutex> file found in the search path.
// #include_next is a GCC extension
#include_next <mutex>

#pragma GCC diagnostic pop

#include <tuple>
#include <cerrno>

#include <micro-os-plus/rtos.h>

#include <micro-os-plus/estd/system_error>
#include <micro-os-plus/estd/chrono>

// ----------------------------------------------------------------------------

#pragma GCC diagnostic push

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wc++98-compat"
#endif

namespace micro_os_plus
{
  namespace estd
  {
    // ------------------------------------------------------------------------

    /**
     * @ingroup micro-os-plus-iso
     * @{
     */

    // ========================================================================
    class mutex
    {
    private:
      using native_type = micro_os_plus::rtos::mutex;

    public:
      using native_handle_type = native_type*;

      /* constexpr in ISO */
      mutex () noexcept;

      ~mutex () = default;

      mutex (const mutex&) = delete;
      mutex&
      operator= (const mutex&)
          = delete;

      void
      lock ();

      bool
      try_lock ();

      void
      unlock ();

      native_handle_type
      native_handle ();

    protected:
      native_type nm_;
    };

    // ========================================================================

    class recursive_mutex
    {
    private:
      using native_type = micro_os_plus::rtos::mutex;

    public:
      using native_handle_type = native_type*;

      recursive_mutex ();

      ~recursive_mutex () = default;

      recursive_mutex (const recursive_mutex&) = delete;
      recursive_mutex&
      operator= (const recursive_mutex&)
          = delete;

      void
      lock ();

      bool
      try_lock () noexcept;

      void
      unlock ();

      native_handle_type
      native_handle ();

    protected:
      native_type nm_;
    };

    // ========================================================================

    class timed_mutex : public mutex
    {
    public:
      timed_mutex () = default;

      ~timed_mutex () = default;

      timed_mutex (const timed_mutex&) = delete;
      timed_mutex&
      operator= (const timed_mutex&)
          = delete;

      template <typename Rep_T, typename Period_T>
      bool
      try_lock_for (const std::chrono::duration<Rep_T, Period_T>& rel_time);

      template <typename Clock_T, typename Duration_T>
      bool
      try_lock_until (
          const std::chrono::time_point<Clock_T, Duration_T>& abs_time);
    };

    // ========================================================================

    class recursive_timed_mutex : recursive_mutex
    {
    public:
      recursive_timed_mutex () = default;

      ~recursive_timed_mutex () = default;

      recursive_timed_mutex (const recursive_timed_mutex&) = delete;
      recursive_timed_mutex&
      operator= (const recursive_timed_mutex&)
          = delete;

      template <typename Rep_T, typename Period_T>
      bool
      try_lock_for (const std::chrono::duration<Rep_T, Period_T>& rel_time);

      template <typename Clock_T, typename Duration_T>
      bool
      try_lock_until (
          const std::chrono::time_point<Clock_T, Duration_T>& abs_time);
    };

    /**
     * @}
     */

    // ========================================================================
    // Inline & template implementations.
    // ========================================================================
    inline mutex::mutex () noexcept
    {
    }

    inline mutex::native_handle_type
    mutex::native_handle ()
    {
      return &nm_;
    }

    // ========================================================================

    inline recursive_mutex::recursive_mutex ()
        : nm_{ micro_os_plus::rtos::mutex::initializer_recursive }
    {
    }

    inline recursive_mutex::native_handle_type
    recursive_mutex::native_handle ()
    {
      return &nm_;
    }

    // ========================================================================

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Waggregate-return"

    template <typename Rep_T, typename Period_T>
    bool
    timed_mutex::try_lock_for (
        const std::chrono::duration<Rep_T, Period_T>& rel_time)
    {
      using namespace std::chrono;
      micro_os_plus::rtos::clock::duration_t ticks = 0;
      if (rel_time > duration<Rep_T, Period_T>::zero ())
        {
          ticks = static_cast<micro_os_plus::rtos::clock::duration_t> (
              micro_os_plus::estd::chrono::ceil<
                  micro_os_plus::estd::chrono::systicks> (rel_time)
                  .count ());
        }

      micro_os_plus::rtos::result_t res;
      res = nm_.timed_lock (ticks);
      if (res == micro_os_plus::rtos::result::ok)
        {
          return true;
        }
      else if (res == ETIMEDOUT)
        {
          return false;
        }

      micro_os_plus::estd::__throw_system_error (
          static_cast<int> (res), "timed_mutex try_lock failed");
      return false;
    }

    template <typename Clock_T, typename Duration_T>
    bool
    timed_mutex::try_lock_until (
        const std::chrono::time_point<Clock_T, Duration_T>& abs_time)
    {
      using clock = Clock_T;

      auto now = clock::now ();
      while (now < abs_time)
        {
          if (try_lock_for (abs_time - now))
            {
              return true;
            }
          now = clock::now ();
        }

      return false;
    }

#pragma GCC diagnostic pop

    // ========================================================================

    template <typename Rep_T, typename Period_T>
    bool
    recursive_timed_mutex::try_lock_for (
        const std::chrono::duration<Rep_T, Period_T>& rel_time)
    {
      using namespace std::chrono;
      micro_os_plus::rtos::clock::duration_t ticks = 0;
      if (rel_time > duration<Rep_T, Period_T>::zero ())
        {
          ticks = static_cast<micro_os_plus::rtos::clock::duration_t> (
              micro_os_plus::estd::chrono::ceil<
                  micro_os_plus::estd::chrono::systicks> (rel_time)
                  .count ());
        }

      micro_os_plus::rtos::result_t res;
      res = nm_.timed_lock (ticks);
      if (res == micro_os_plus::rtos::result::ok)
        {
          return true;
        }
      else if (res == ETIMEDOUT)
        {
          return false;
        }

      micro_os_plus::estd::__throw_system_error (
          static_cast<int> (res), "timed_mutex try_lock failed");
      return false;
    }

    template <typename Clock_T, typename Duration_T>
    bool
    recursive_timed_mutex::try_lock_until (
        const std::chrono::time_point<Clock_T, Duration_T>& abs_time)
    {
      using clock = Clock_T;

      auto now = clock::now ();
      while (now < abs_time)
        {
          if (try_lock_for (abs_time - now))
            {
              return true;
            }
          now = clock::now ();
        }

      return false;
    }

    // ==========================================================================
  } // namespace estd
} // namespace micro_os_plus

#if defined(MICRO_OS_PLUS_HAS_STD_THREADS)

namespace std
{
  /**
   * @ingroup micro-os-plus-iso
   * @{
   */

  // Redefine the objects in the std:: namespace.

  using mutex = micro_os_plus::estd::mutex;
  using recursive_mutex = micro_os_plus::estd::recursive_mutex;
  using timed_mutex = micro_os_plus::estd::timed_mutex;
  using recursive_timed_mutex = micro_os_plus::estd::recursive_timed_mutex;

  /**
   * @}
   */
} // namespace std

#endif

#pragma GCC diagnostic pop

// ----------------------------------------------------------------------------

#endif // MICRO_OS_PLUS_ESTD_MUTEX_

// ----------------------------------------------------------------------------
